/*
Functions for calculating certain nuclear decays

for the (wx)Maxima CAS

Author: Martin Zwicknagl

Version 5. 4.3.2023
add atomic masses to output

Version 4. 22.3.2021
clean up for first upload on github

Version 3: 21.3.2021
even better handling of conrer cases
rename some functions

Version 2: 28.2.2021
better handling of corner cases

Version 1:  7.5.2019
initial version
*/

nuclear():=
    (
    print("The following functions are implemented:"),
    print("a ... mass number; p ... atomic number, ord ... atomic number or element name"),
    print(""),
    print("searchElementNumber(str)   ... returns number from name; str=element name"),
    print("searchElementName(p)   ... returns name from number"),
    print("decay(a, p)"),
    print("printIsotope(a, p)   ... returns pretty printed isotope"),
    print("alphaDecay(a, p)"),
    print("betaMinusDecay(a, p)"),
    print("betaPlusDecay(a, p)"),
    print("EC(a, p)   ... Electron capture"),
    print("neutronEmission(a, p)"),
    print("protonEmission(a, p)"),
    print("speedFromEnergy(E, m)   ... returns speed; E=Energy; m=mass"),
    print(""),
    print("The following variables and arrays are used"),
    print("names[], isotope_array[a, p], %mHe4..."),
    print("")
)$

/* array with the names of the elements */
names: [ "H" , "He" , "Li" , "Be" , "B" , "C" , "N" , "O" , "F" , "Ne" , "Na" , "Mg" , "Al" , "Si" , "P" , "S" , "Cl" , "Ar" , "K" , "Ca" , "Sc" , "Ti" , "V" , "Cr" , "Mn" , "Fe" , "Co" , "Ni" , "Cu" , "Zn" , "Ga" , "Ge" , "As" , "Se" , "Br" , "Kr" , "Rb" , "Sr" , "Y" , "Zr" , "Nb" , "Mo" , "Tc" , "Ru" , "Rh" , "Pd" , "Ag" , "Cd" , "In" , "Sn" , "Sb" , "Te" , "I" , "Xe" , "Cs" , "Ba" , "La" , "Ce" , "Pr" , "Nd" , "Pm" , "Sm" , "Eu" , "Gd" , "Tb" , "Dy" , "Ho" , "Er" , "Tm" , "Yb" , "Lu" , "Hf" , "Ta" , "W" , "Re" , "Os" , "Ir" , "Pt" , "Au" , "Hg" , "Tl" , "Pb" , "Bi" , "Po" , "At" , "Rn" , "Fr" , "Ra" , "Ac" , "Th" , "Pa" , "U" , "Np" , "Pu" , "Am" , "Cm" , "Bk" , "Cf" , "Es" , "Fm" , "Md" , "No" , "Lr" , "Rf" , "Db" , "Sg" , "Bh" , "Hs" , "Mt" , "Ds" , "Rg" , "Cn" , "Nh" , "Fl" , "Mc" , "Lv" , "Ts" , "Og" ];

/* array with the atomic masses of the isotopes */
/* e.g.: isotope_array[3,1] mass of 3/1H */
load(isotope_array);

/* Suche die Ordungszahl des Elementes mit Namen name */
searchElementNumber(name):= (
    for i:1 thru 118 do
        (
        if ( names[i] = name ) then
                return(i)
        )
    -1
)$

/* searche the name for the atomic number p */
searchElementName(name):=names[name];

/* pretty print isotope e.g. 3/1H */
printIsotope(a, p):= (
    local (name),
    name: searchElementName(p),
    printf(false,"~d/~d~a",a, p,name)
)$

/* calculates the speed from kinetic energy */
speedFromEnergy(E, m) := (
    v_klassisch:abs(rhs(solve([E=1/2*m*v^2])[1])),
    printf(true, "~&classic:      v=~10e m/s = ~7f c", v_klassisch, v_klassisch/%c),
    if ( v_klassisch > %c*0.1 ) then
        (
        gl:E=(1/sqrt(1-v^2/%c^2)-1)*m*%c^2,
        v_relat:abs(rhs(solve(ratsimp(gl/%c^2/m+1))[1])),
        printf(true, "~&relativistic: v=~10e m/s = ~7f c", v_relat, v_relat/%c)
        )
)$

decays(a, p):= (
    alphaDecay(a, p),
    print(""),

    betaMinusDecay(a, p),
    print(""),

    betaPlusDecay(a, p),
    print(""),

    EC(a, p),
    print(""),

    neutronEmission(a, p),
    print(""),

    protonEmission(a, p),
    print(""),

    ""
)$

alphaDecay(a, ord):= (
    local( Mother, Daughter, Delta_M, Energy_Joule, Energy_MeV, massDaughter, gl1, gl2, Ealpha, ET, p),
    if ( stringp(ord) ) then
        (
        p: searchElementNumber(ord)
        )
    else
        (
        p: ord
        ),

    printf(true, "~&Alpha Decay:"),
    if ( not numberp(isotope_array[a, p]) ) then
        (
        printf(true, "~&Isotope not in database")
        )
    elseif ( not numberp(isotope_array[a-4,p-2]) ) then
        (
        printf(true, "~&Daughter core not in database")
        )
    elseif ( a<=4 or p<=2) then
        (
        printf(true, "~&Alpha decay not possible!")
        )
    else
        (
        Mother:printIsotope(a, p),
        Daughter:printIsotope(a-4,p-2),
        printf(true, "~a -> ~a + ~a", Mother, Daughter, alpha),

        massDaughter:isotope_array[a-4,p-2],
        massMother:isotope_array[a,p],
        printf(true, "~&m~a = ~10f u", Mother, massMother/%u),
        printf(true, "~&m~a = ~10f u", Daughter, massDaughter/%u),
        Delta_M: (isotope_array[a, p]-p*%me)-(massDaughter-(p-2)*%me+%malpha),
        printf(true, "~&Delta_M: ~18e kg  = ~10f u",Delta_M, Delta_M/%u),

        if (Delta_M < 0) then
            (
            printf(true, "~&Alpha decay not possible!" )
            )
        else
            (
            Energy_Joule: Delta_M * %c^2,
            Energy_MeV: Energy_Joule/%qe/1e6,
            printf(true, "~&Total Energy: ~16e J =  ~10f MeV", Energy_Joule, Energy_MeV),

            gl1: Energy_Joule=EnergyDaughter+EnergyAlpha,
            gl2: EnergyDaughter/EnergyAlpha=%malpha/massDaughter,
            solve([gl1,gl2]),
            ET:rhs(solve([gl1,gl2])[1][1]),
            Ealpha:rhs(solve([gl1,gl2])[1][2]),
            printf(true, "~&Energy ~a: ~f MeV", Daughter, ET/%qe/1e6),
            printf(true, "~&Energy alpha: ~f MeV", Ealpha/%qe/1e6),
            printf(true, "~&Speed ~a:", Daughter),
            speedFromEnergy(ET, massDaughter),
            printf(true, "~&Speed Alpha: "),
            speedFromEnergy(Ealpha, %malpha)
            )
        ),
    ""
)$

neutronEmission(a, ord):= (
    local(Mother, Daughter, Delta_M, Energy_Joule, Energy_MeV, gl1, gl2, massDaughter, ET, EN, p),
    if ( stringp(ord) ) then
        (
        p: searchElementNumber(ord)
        )
    else
        (
        p: ord
        ),

    printf(true, "~&Neutron Emission:"),
    if ( not numberp(isotope_array[a, p]) ) then
        (
        printf(true,  "~&Isotope not in database")
        )
    elseif ( a<=1 or not numberp(isotope_array[a-1,p]) ) then
        (
        printf(true,  "Neutron emission not possible!")
        )
    else
        (
        Mother:printIsotope(a, p),
        Daughter:printIsotope(a-1,p),
        printf(true, "~&~a -> ~a + ~a", Mother, Daughter, "n"),

        massDaughter:isotope_array[a-1,p],
        massMother:isotope_array[a,p],
        printf(true, "~&m~a = ~10f u", Mother, massMother/%u),
        printf(true, "~&m~a = ~10f u", Daughter, massDaughter/%u),
        Delta_M: (isotope_array[a, p]-p*%me)-(massDaughter-(p-0)*%me+%mn),
        printf(true, "~&Delta_M: ~18e kg  = ~10f u",Delta_M, Delta_M/%u),

        if (Delta_M < 0) then
            (
            printf(true, "~&Neutron emission not possible!" )
            )
        else
            (
            Energy_Joule: Delta_M * %c^2,
            Energy_MeV: Energy_Joule/%qe/1e6,
            printf(true, "~&Total energy: ~16e J =  ~10f MeV", Energy_Joule, Energy_MeV),

            gl1: Energy_Joule=EnergyDaughter+EnergyN,
            gl2: EnergyDaughter/EnergyN=%mn/massDaughter,
            solve([gl1,gl2]),
            ET:rhs(solve([gl1,gl2])[1][1]),
            EN:rhs(solve([gl1,gl2])[1][2]),
            printf(true, "~&Energy ~a: ~f MeV", Daughter, ET/%qe/1e6),
            printf(true, "~&Energy n: ~f MeV", EN/%qe/1e6),
            printf(true, "~&Speed ~a:", Daughter),
            speedFromEnergy(ET, massDaughter),
            printf(true, "~&Speed Neutron:"),
            speedFromEnergy(EN, %mn)
            )
        ),
    ""
)$
        
protonEmission(a, ord):= (
    local(Mother, Daughter, Delta_M, Energy_Joule, Energy_MeV, gl1, gl2, massDaughter, ET, EP, p),
    if ( stringp(ord) ) then
        (
        p: searchElementNumber(ord)
        )
    else
        (
        p: ord
        ),

    printf(true, "~&Proton Emission:"),
    if ( not numberp(isotope_array[a, p]) ) then
        (
        printf(true,  "~&Isotope not in database")
        )
    elseif ( a<=1 or p<=1 or not numberp(isotope_array[a-1,p-1]) ) then
        (
        printf(true,  "~&Proton emission not possible!")
        )
    else
        (
        Mother:printIsotope(a, p),
        Daughter:printIsotope(a-1,p-1),
        printf(true, "~&~a -> ~a + ~a", Mother, Daughter, "p"),

        massDaughter:isotope_array[a-1,p-1],
        massMother:isotope_array[a,p],
        printf(true, "~&m~a = ~10f u", Mother, massMother/%u),
        printf(true, "~&m~a = ~10f u", Daughter, massDaughter/%u),
        Delta_M: (isotope_array[a, p]-p*%me)-(massDaughter-(p-1)*%me+%mp),
        printf(true, "~&Delta_M: ~18e kg  = ~10f u", Delta_M, Delta_M/%u),

        if (Delta_M < 0) then
            (
            printf(true, "~&Proton emission not possible!" )
            )
        else
            (
            Energy_Joule: Delta_M * %c^2,
            Energy_MeV: Energy_Joule/%qe/1e6,
            printf(true, "~&Total Energy: ~16e J =  ~10f MeV",Energy_Joule, Energy_MeV),

            gl1: Energy_Joule=EnergyDaughter+EnergyP,
            gl2: EnergyDaughter/EnergyP=%mp/massDaughter,
            solve([gl1,gl2]),
            ET:rhs(solve([gl1,gl2])[1][1]),
            EP:rhs(solve([gl1,gl2])[1][2]),
            printf(true, "~&Energy ~a: ~f MeV ", Daughter, ET/%qe/1e6),
            printf(true, "~&Energy p: ~f MeV ", EP/%qe/1e6),
            printf(true, "~&Seed ~a:", Daughter),
            speedFromEnergy(ET, massDaughter),
            printf(true, "~&Speed Proton:"),
            speedFromEnergy(EP, %mp)
            )
        ),
    ""
)$
        
betaMinusDecay(a, ord):= (
    local(Mother, Daughter, Delta_M, Energy_Joule, Energy_MeV, gl1, gl2, massDaughter, ET, EN, p),
    if ( stringp(ord) ) then
        (
        p: searchElementNumber(ord)
        )
    else
        (
        p: ord
        ),

    printf(true, "~&Beta Minus Decay:"),
    if ( not numberp(isotope_array[a, p]) ) then
        (
        printf(true,  "~&Isotope not in database")
        )
    elseif ( not numberp(isotope_array[a, p+1]) ) then
        (
        printf(true,  "~&Beta minus decay not possible! To little data!")
        )
    else
        (
        Mother: printIsotope(a, p),
        Daughter: printIsotope(a, p+1),
        printf(true, "~&~a -> ~a + ~a + ~a", Mother, Daughter, "e-", Antineutrino),
        massDaughter:isotope_array[a, p+1],
        massMother:isotope_array[a,p],
        printf(true, "~&m~a = ~10f u", Mother, massMother/%u),
        printf(true, "~&m~a = ~10f u", Daughter, massDaughter/%u),
        Delta_M: (isotope_array[a, p]-p*%me)-(massDaughter-(p+1)*%me+%me),
        printf(true, "~&Delta_M: ~18e kg  = ~10f u", Delta_M, Delta_M/%u),

        if (Delta_M < 0) then
            (
            printf(true, "~&Beta minus decay not possible!")
            )
        else
            (
            Energy_Joule: Delta_M * %c^2,
            Energy_MeV: Energy_Joule/%qe/1e6,
            printf(true, "~&Total Energy: ~16e J =  ~10f MeV",Energy_Joule, Energy_MeV),
            printf(true, "~&Seed ~a:", Daughter),
            speedFromEnergy(Energy_Joule, massDaughter),
            printf(true, "~&Speed Electron:"),
            speedFromEnergy(Energy_Joule, %me)
            )
        ),
    ""
)$
        
betaPlusDecay(a, ord):= (
    local(Mother, Daughter, Delta_M, Energy_Joule, Energy_MeV, gl1, gl2, massDaughter, ET, EN, p),
    if ( stringp(ord) ) then
        (
        p: searchElementNumber(ord)
        )
    else
        (
        p: ord
        ),

    printf(true, "~&Beta Plus Decay:"),
    if ( not numberp(isotope_array[a, p]) ) then
        (
        printf(true, "~&Isotope not in database")
        )
    elseif ( not numberp(isotope_array[a, p-1]) ) then
        (
        printf(true,  "~&Beta plus decay not possible! To little data!")
        )
    elseif ( p<=1 ) then
        (
        printf(true,  "~&Beta plus decay not possible!")
        )
    else
        (
        Mother:printIsotope(a, p),
        Daughter:printIsotope(a, p-1),
        printf(true, "~&~a -> ~a + ~a + ~a", Mother, Daughter, "e+", Neutrino),

        massDaughter:isotope_array[a, p-1],
        massMother:isotope_array[a,p],
        printf(true, "~&m~a = ~10f u", Mother, massMother/%u),
        printf(true, "~&m~a = ~10f u", Daughter, massDaughter/%u),
        Delta_M: (isotope_array[a, p]-p*%me)-(massDaughter-(p-1)*%me+%me),
        printf(true, "~&Delta_M: ~18e kg  = ~10f u", Delta_M, Delta_M/%u),

        if (Delta_M < 0) then
            (
            printf(true, "~&Beta plus decay not possible!" )
            )
        else
            (
            Energy_Joule: Delta_M * %c^2,
            Energy_MeV: Energy_Joule/%qe/1e6,
            printf(true, "~&Energy: ~16e J,  ~10f MeV", Energy_Joule, Energy_MeV),
            printf(true, "~&+ 2*me*c^2"),
            printf(true, "~&Speed ~a: ", Daughter),
            speedFromEnergy(Energy_Joule, massDaughter),
            printf(true, "~&Speed Positron: "),
            speedFromEnergy(Energy_Joule, %me)
            )
        ),
    ""
)$

EC(a, ord):= (
    local(Mother, Daughter, Delta_M, Energy_Joule, Energy_MeV, gl1, gl2, massDaughter, ET, EN, p),
    if (stringp(ord)) then
        (
        p: searchElementNumber(ord)
        )
    else
        (
        p: ord
        ),

    printf(true, "~&EC:"),
    if ( not numberp(isotope_array[a, p]) ) then
        (
        printf(true,  "~&Isotope not in database")
        )
    elseif (p<=1) then
        (
        printf(true,  "~&EC not possible!")
        )
    elseif (not numberp(isotope_array[a, p-1])) then
        (
        printf(true,  "~&EC not possible! To little data!")
        )
    else
        (
        Mother:printIsotope(a, p),
        Daughter:printIsotope(a, p-1),
        printf(true, "~&~a +~a -> ~a + ~a", Mother, "e-", Daughter, Neutrino),

        massDaughter:isotope_array[a, p-1],
        massMother:isotope_array[a,p],
        printf(true, "~&m~a = ~10f u", Mother, massMother/%u),
        printf(true, "~&m~a = ~10f u", Daughter, massDaughter/%u),
        Delta_M: (isotope_array[a, p]-p*%me+%me)-(massDaughter-(p-1)*%me),
        printf(true, "~&Delta_M: ~18e kg  = ~10f u", Delta_M, Delta_M/%u),

        if (Delta_M < 0) then
            (
            printf(true, "~&EC not possible!")
            )
        else
            (
            Energy_Joule: Delta_M * %c^2,
            Energy_MeV: Energy_Joule/%qe/1e6,
            printf(true, "~&Energy: ~16e J,  ~10f MeV", Energy_Joule, Energy_MeV),
            printf(true, "~&Speed ~a: ", Daughter),
            speedFromEnergy(Energy_Joule, massDaughter)
            )
        ),
    ""
)$
        
/* Ordnungszahl der Elemente in symbolischer Schreibweise */
%H:1;
%He:2;
%Li:3;
%Be:4;
%B:5;
%C:6;
%N:7;
%O:8;
%F:9;
%Ne:10;
%Na:11;
%Mg:12;
%Al:13;
%Si:14;
%P:15;
%S:16;
%Cl:17;
%Ar:18;
%K:19;
%Ca:20;
%Sc:21;
%Ti:22;
%V:23;
%Cr:24;
%Mn:25;
%Fe:26;
%Co:27;
%Ni:28;
%Cu:29;
%Zn:30;
%Ga:31;
%Ge:32;
%As:33;
%Se:34;
%Br:35;
%Kr:36;
%Rb:37;
%Sr:38;
%Y:39;
%Zr:40;
%Nb:41;
%Mo:42;
%Tc:43;
%Ru:44;
%Rh:45;
%Pd:46;
%Ag:47;
%Cd:48;
%In:49;
%Sn:50;
%Sb:51;
%Te:52;
%I:53;
%Xe:54;
%Cs:55;
%Ba:56;
%La:57;
%Ce:58;
%Pr:59;
%Nd:60;
%Pm:61;
%Sm:62;
%Eu:63;
%Gd:64;
%Tb:65;
%Dy:66;
%Ho:67;
%Er:68;
%Tm:69;
%Yb:70;
%Lu:71;
%Hf:72;
%Ta:73;
%W:74;
%Re:75;
%Os:76;
%Ir:77;
%Pt:78;
%Au:79;
%Hg:80;
%Tl:81;
%Pb:82;
%Bi:83;
%Po:84;
%At:85;
%Rn:86;
%Fr:87;
%Ra:88;
%Ac:89;
%Th:90;
%Pa:91;
%U:92;
%Np:93;
%Pu:94;
%Am:95;
%Cm:96;
%Bk:97;
%Cf:98;
%Es:99;
%Fm:100;
%Md:101;
%No:102;
%Lr:103;
%Rf:104;
%Db:105;
%Sg:106;
%Bh:107;
%Hs:108;
%Mt:109;
%Ds:110;
%Rg:111;
%Cn:112;
%Nh:113;
%Fl:114;
%Mc:115;
%Lv:116;
%Ts:117;
%Og:118;

